<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ljun&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://liujunit.github.io/"/>
  <updated>2018-11-11T05:52:25.572Z</updated>
  <id>https://liujunit.github.io/</id>
  
  <author>
    <name>Ljun</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>重温数据库操作JDBC</title>
    <link href="https://liujunit.github.io/2018/11/11/%E9%87%8D%E6%B8%A9%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9CJDBC/"/>
    <id>https://liujunit.github.io/2018/11/11/重温数据库操作JDBC/</id>
    <published>2018-11-11T05:07:57.000Z</published>
    <updated>2018-11-11T05:52:25.572Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><pre><code>    在日常的开发当中，我们总是用框架去连接数据库，去完成业务中的需求，但是不可避免的有时候我们需要对数据进行额外的处理，批量的修改或查询，这时候用框架就显得有点杀鸡用牛刀了，在这里我们将重温原始的JDBC操作，好记性不如烂笔头。</code></pre><h1 id="JDBC操作步骤"><a href="#JDBC操作步骤" class="headerlink" title="JDBC操作步骤"></a>JDBC操作步骤</h1><pre><code>1.注册驱动2.获取连接3.获取预处理语句4.添加占位符5.结果遍历或者查询修改记录条数6.释放资源</code></pre><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><pre><code>1.导入数据库连接需要的jar包，这里使用maven</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;5.1.47&lt;/version&gt;</span><br></pre></td></tr></table></figure><pre><code>2.增删改查的测试</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line">import org.junit.Test;</span><br><span class="line"></span><br><span class="line">import java.sql.*;</span><br><span class="line"></span><br><span class="line">public class DBTest &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">    * 增</span><br><span class="line">    *</span><br><span class="line">    * @throws ClassNotFoundException</span><br><span class="line">    * @throws SQLException</span><br><span class="line">    */</span><br><span class="line">    @Test</span><br><span class="line">    public void test01() throws ClassNotFoundException, SQLException &#123;</span><br><span class="line">        //1.注册驱动</span><br><span class="line">        Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</span><br><span class="line">        //2.获取连接</span><br><span class="line">        Connection conn = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test&quot;, &quot;root&quot;, &quot;asdfmin&quot;);</span><br><span class="line">        //3.获得预处理语句</span><br><span class="line">        String sql = &quot;insert into user (name, sex, age) values (? , ?, ?)&quot;;</span><br><span class="line">        PreparedStatement preparedStatement = conn.prepareStatement(sql);</span><br><span class="line">        //4.添加占位符</span><br><span class="line">        preparedStatement.setString(1, &quot;jack&quot;);</span><br><span class="line">        preparedStatement.setString(2, &quot;男&quot;);</span><br><span class="line">        preparedStatement.setString(3, &quot;18&quot;);</span><br><span class="line">        //5.执行预处理语句</span><br><span class="line">        int i = preparedStatement.executeUpdate();</span><br><span class="line">        System.out.println(&quot;添加新记录条数：&quot; + i);</span><br><span class="line">        //6.释放资源</span><br><span class="line">        preparedStatement.close();</span><br><span class="line">        conn.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">    * 更</span><br><span class="line">    *</span><br><span class="line">    * @throws ClassNotFoundException</span><br><span class="line">    * @throws SQLException</span><br><span class="line">    */</span><br><span class="line">    @Test</span><br><span class="line">    public void test02() throws ClassNotFoundException, SQLException &#123;</span><br><span class="line">        //1.注册驱动</span><br><span class="line">        Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</span><br><span class="line">        //2.获取连接</span><br><span class="line">        Connection conn = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test&quot;, &quot;root&quot;, &quot;asdfmin&quot;);</span><br><span class="line">        //3.获取预处理语句</span><br><span class="line">        String sql = &quot;update user set age = ? where name = ?&quot;;</span><br><span class="line">        PreparedStatement preparedStatement = conn.prepareStatement(sql);</span><br><span class="line">        //4.添加占位符</span><br><span class="line">        preparedStatement.setString(1, &quot;19&quot;);</span><br><span class="line">        preparedStatement.setString(2, &quot;jack&quot;);</span><br><span class="line">        //5.执行预处理语句</span><br><span class="line">        int i = preparedStatement.executeUpdate();</span><br><span class="line">        System.out.println(&quot;更新记录条数：&quot; + i);</span><br><span class="line">        //6.释放资源</span><br><span class="line">        preparedStatement.close();</span><br><span class="line">        conn.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">    * 删</span><br><span class="line">    *</span><br><span class="line">    * @throws ClassNotFoundException</span><br><span class="line">    * @throws SQLException</span><br><span class="line">    */</span><br><span class="line">    @Test</span><br><span class="line">    public void test03() throws ClassNotFoundException, SQLException &#123;</span><br><span class="line">        //1.注册驱动</span><br><span class="line">        Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</span><br><span class="line">        //2.获取连接</span><br><span class="line">        Connection conn = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test&quot;, &quot;root&quot;, &quot;asdfmin&quot;);</span><br><span class="line">        //3.获取预处理语句</span><br><span class="line">        String sql = &quot;delete from user where id = ?&quot;;</span><br><span class="line">        PreparedStatement preparedStatement = conn.prepareStatement(sql);</span><br><span class="line">        //4.添加占位符</span><br><span class="line">        preparedStatement.setString(1, &quot;1&quot;);</span><br><span class="line">        //5.执行预处理</span><br><span class="line">        int i = preparedStatement.executeUpdate();</span><br><span class="line">        System.out.println(&quot;删除记录条数：&quot; + i);</span><br><span class="line">        //6.释放资源</span><br><span class="line">        preparedStatement.close();</span><br><span class="line">        conn.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">    * 查</span><br><span class="line">    * @throws ClassNotFoundException</span><br><span class="line">    * @throws SQLException</span><br><span class="line">    */</span><br><span class="line">    @Test</span><br><span class="line">    public void test04() throws ClassNotFoundException, SQLException &#123;</span><br><span class="line">        //1.注册驱动</span><br><span class="line">        Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</span><br><span class="line">        //2.获取连接</span><br><span class="line">        Connection conn = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test&quot;, &quot;root&quot;, &quot;asdfmin&quot;);</span><br><span class="line">        //3.获取预处理语句</span><br><span class="line">        //String sql = &quot;select * from user&quot;;</span><br><span class="line">        String sql = &quot;select * from user where name = ?&quot;;</span><br><span class="line">        PreparedStatement preparedStatement = conn.prepareStatement(sql);</span><br><span class="line">        //4.添加站位符</span><br><span class="line">        preparedStatement.setString(1, &quot;jack&quot;);</span><br><span class="line">        //5.执行预处理</span><br><span class="line">        ResultSet resultSet = preparedStatement.executeQuery();</span><br><span class="line">        //6.遍历结果集</span><br><span class="line">        while (resultSet.next()) &#123;</span><br><span class="line">            int id = resultSet.getInt(&quot;id&quot;);</span><br><span class="line">            String name = resultSet.getString(&quot;name&quot;);</span><br><span class="line">            String sex = resultSet.getString(&quot;sex&quot;);</span><br><span class="line">            String age = resultSet.getString(&quot;age&quot;);</span><br><span class="line">            System.out.println(&quot;id:&quot; + id + &quot;   name:&quot; + name + &quot;  set:&quot; + sex + &quot;  age:&quot; + age);</span><br><span class="line">        &#125;</span><br><span class="line">        //7.关闭资源</span><br><span class="line">        resultSet.close();</span><br><span class="line">        preparedStatement.close();</span><br><span class="line">        conn.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>3.说明这里用的是预处理语句PreparedStatement（防止sql注入攻击）</code></pre><h1 id="对于JDBC的简单封装"><a href="#对于JDBC的简单封装" class="headerlink" title="对于JDBC的简单封装"></a>对于JDBC的简单封装</h1><pre><code>对于频繁的注册驱动获取连接我们可以进行简单的封装</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">import java.sql.Connection;</span><br><span class="line">import java.sql.DriverManager;</span><br><span class="line">import java.sql.SQLException;</span><br><span class="line"></span><br><span class="line">public class JDBCUtils &#123;</span><br><span class="line"></span><br><span class="line">    private static final String DRIVERNAME = &quot;com.mysql.jdbc.Driver&quot;;</span><br><span class="line">    private static final String URL = &quot;jdbc:mysql://localhost:3306/test&quot;;</span><br><span class="line">    private static final String USER = &quot;root&quot;;</span><br><span class="line">    private static final String PASSWORD = &quot;asdfmin&quot;;</span><br><span class="line"></span><br><span class="line">    static &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            //1.注册驱动</span><br><span class="line">            Class.forName(DRIVERNAME);</span><br><span class="line">        &#125; catch (ClassNotFoundException e) &#123;</span><br><span class="line">            System.out.println(&quot;注册驱动失败&quot;);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static Connection getConn() throws SQLException &#123;</span><br><span class="line">        //2.获取连接</span><br><span class="line">        Connection conn = DriverManager.getConnection(URL, USER, PASSWORD);</span><br><span class="line">        //返回连接</span><br><span class="line">        return conn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="测试封装的JDBC工具类"><a href="#测试封装的JDBC工具类" class="headerlink" title="测试封装的JDBC工具类"></a>测试封装的JDBC工具类</h1><pre><code>import org.junit.Test;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;public class DBUtilTest {    /**    * 测试封装的JDBCUtil    */    @Test    public void test01() {        Connection conn = null;        PreparedStatement preparedStatement = null;        ResultSet resultSet = null;        try {            //1.获取连接            conn = JDBCUtils.getConn();            //2.获取执行语句            String sql = &quot;select * from user&quot;;            preparedStatement = conn.prepareStatement(sql);            //3.添加占位符            //4.执行预处理语句            resultSet = preparedStatement.executeQuery();            //5.遍历结果集            while (resultSet.next()) {                String name = resultSet.getString(&quot;name&quot;);                System.out.println(&quot;name:&quot; + name);            }        } catch (SQLException e) {            e.printStackTrace();        } finally {            //6.释放资源            try {                resultSet.close();                preparedStatement.close();                conn.close();            } catch (SQLException e) {                e.printStackTrace();            }        }    }}</code></pre><h1 id="API的一些简单说明"><a href="#API的一些简单说明" class="headerlink" title="API的一些简单说明"></a>API的一些简单说明</h1><pre><code>执行预处理语句的APIint executeUpdate(); --执行insert update delete语句.ResultSet executeQuery(); --执行select语句.boolean execute(); --执行select返回true 执行其他的语句返回false.</code></pre><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><pre><code>温故而知新。</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;    在日常的开发当中，我们总是用框架去连接数据库，去完成业务中的需求，但是不可避免的有时候我们需要对数据进行额外的处理，
      
    
    </summary>
    
      <category term="数据库" scheme="https://liujunit.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="JDBC" scheme="https://liujunit.github.io/tags/JDBC/"/>
    
      <category term="MySQL" scheme="https://liujunit.github.io/tags/MySQL/"/>
    
      <category term="SQL" scheme="https://liujunit.github.io/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>hexo（jacman主题）修改导航链接为绝对路径</title>
    <link href="https://liujunit.github.io/2018/11/08/hexo%EF%BC%88jacman%E4%B8%BB%E9%A2%98%EF%BC%89%E4%BF%AE%E6%94%B9%E5%AF%BC%E8%88%AA%E9%93%BE%E6%8E%A5%E4%B8%BA%E7%BB%9D%E5%AF%B9%E8%B7%AF%E5%BE%84/"/>
    <id>https://liujunit.github.io/2018/11/08/hexo（jacman主题）修改导航链接为绝对路径/</id>
    <published>2018-11-08T14:04:24.000Z</published>
    <updated>2018-11-09T13:05:02.850Z</updated>
    
    <content type="html"><![CDATA[<h1 id="起始"><a href="#起始" class="headerlink" title="起始"></a>起始</h1><pre><code>    一直想自己搭建一个博客，但是没想到坑是这么的多，磕磕绊绊总算是可以开始写了，本人做java开发的，博客也是作为简单的一个学习记录吧。从简单的事情做起,闲下来就会写一写，也算是督促自己吧。</code></pre><h1 id="关于jacman导航栏链接的修改"><a href="#关于jacman导航栏链接的修改" class="headerlink" title="关于jacman导航栏链接的修改"></a>关于jacman导航栏链接的修改</h1><pre><code>hexo提倡使用绝对路径，但是我想在我的导航栏里面加上一些自己的链接，配置了_config.yml</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">    主页: /</span><br><span class="line">    归档: /archives</span><br><span class="line">    GitHub: https://github.com/liujunit</span><br><span class="line">    CSDN: https://blog.csdn.net/liujun_for_java</span><br><span class="line">    关于: /about</span><br></pre></td></tr></table></figure><pre><code>    但是这样的配置没有生效，跳转链接的时候还是会在GitHub前加上一个斜杠/于是就是开始了漫漫的搜索调试路，无论是百度还是google都找不到自己满意的答案索性自己开始查找修改jacman主题下文件，还是真实找到了</code></pre><h1 id="修改的文件"><a href="#修改的文件" class="headerlink" title="修改的文件"></a>修改的文件</h1><pre><code>修改jacman文件夹下的themes\jacman\layout\_partial\header.ejs文件头部</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">function root_for(path)&#123;</span><br><span class="line">    path = path || &apos;/&apos;</span><br><span class="line">    var root = config.root;</span><br><span class="line">    if (path.substring(0, root.length) !== root)&#123;</span><br><span class="line">        if (path.substring(0, 1) === &apos;/&apos;)&#123;</span><br><span class="line">        path = root.substring(0, root.length - 1) + path;</span><br><span class="line">        &#125; else if(path.indexOf(&apos;http&apos;) == 0)&#123;</span><br><span class="line">            path = path;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            path = root + path;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">return path;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>原先的js代码是没有对http协议是否包含的判断的，自己加个判断路径不变就可以了</code></pre><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><pre><code>    可能大家都是高手高手高高手，没有遇到过这个问题（或许遇到也自己解决了）。。。希望遇到的能有幸看到这篇文正吧，样式后续慢慢调整吧。</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;起始&quot;&gt;&lt;a href=&quot;#起始&quot; class=&quot;headerlink&quot; title=&quot;起始&quot;&gt;&lt;/a&gt;起始&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;    一直想自己搭建一个博客，但是没想到坑是这么的多，磕磕绊绊总算是可以开始写了，本人做java开发的，博客也是
作为简单
      
    
    </summary>
    
      <category term="七七八八" scheme="https://liujunit.github.io/categories/%E4%B8%83%E4%B8%83%E5%85%AB%E5%85%AB/"/>
    
    
      <category term="jacman" scheme="https://liujunit.github.io/tags/jacman/"/>
    
      <category term="hexo" scheme="https://liujunit.github.io/tags/hexo/"/>
    
      <category term="导航链接" scheme="https://liujunit.github.io/tags/%E5%AF%BC%E8%88%AA%E9%93%BE%E6%8E%A5/"/>
    
      <category term="绝对路径" scheme="https://liujunit.github.io/tags/%E7%BB%9D%E5%AF%B9%E8%B7%AF%E5%BE%84/"/>
    
  </entry>
  
</feed>
