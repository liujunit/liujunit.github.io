<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ljun&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://liujunit.github.io/"/>
  <updated>2018-12-21T12:49:29.381Z</updated>
  <id>https://liujunit.github.io/</id>
  
  <author>
    <name>Ljun</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>PDFObject插件不能加载远程链接的问题</title>
    <link href="https://liujunit.github.io/2018/12/21/PDFObject%E6%8F%92%E4%BB%B6%E4%B8%8D%E8%83%BD%E5%8A%A0%E8%BD%BD%E8%BF%9C%E7%A8%8B%E9%93%BE%E6%8E%A5%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>https://liujunit.github.io/2018/12/21/PDFObject插件不能加载远程链接的问题/</id>
    <published>2018-12-21T12:38:42.000Z</published>
    <updated>2018-12-21T12:49:29.381Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PDFObject插件"><a href="#PDFObject插件" class="headerlink" title="PDFObject插件"></a>PDFObject插件</h1><p>PDFObject插件是一款前端阅读pdf的便捷插件，简单好用，官方网址：<a href="https://pdfobject.com/" target="_blank" rel="noopener">https://pdfobject.com/</a>，官方提供的简单用例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/js/pdfobject.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> options = &#123;</span><br><span class="line">   width: <span class="string">"20rem"</span>,</span><br><span class="line">   height: <span class="string">"20rem"</span></span><br><span class="line">&#125;;</span><br><span class="line">PDFObject.embed(<span class="string">"myfile.pdf"</span>, <span class="string">"#my-container"</span>, options);</span><br></pre></td></tr></table></figure><p>详细的使用可以参考官方API，这里不做说明。</p><h1 id="PDF以链接请求的方式获取"><a href="#PDF以链接请求的方式获取" class="headerlink" title="PDF以链接请求的方式获取"></a>PDF以链接请求的方式获取</h1><p>一般情况下，当使用PDFObject的时候，传入的pdf都是路径的方式去应用，当我们的PDF不在本地或者在远端的时候我们该怎么引用呢？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PDFObject.embed(<span class="string">"xxx/xxx.do?id=xxxxx"</span>, <span class="string">"#my-container"</span>, options);</span><br></pre></td></tr></table></figure><p>一般我们都会直接替换路径为请求就可以了，但是这样有时候是行不通的，F12没报错，后台的请求也确实执行了，但是容器里就是不显示PDF，而且我们将这个url贴到浏览器地址里是可以正常下载的。然后就开始百度，开始谷歌，发现大部分人都是有这种问题的，但是都没有一个好的解决方案。</p><p>查看后台下载的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> response </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> filePath//文件完整路径(包括文件名和扩展名)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> fileName//下载后看到的文件名</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  文件名</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fileDownload</span><span class="params">(<span class="keyword">final</span> HttpServletResponse response, String filePath, String fileName)</span> <span class="keyword">throws</span> Exception</span>&#123; </span><br><span class="line">    <span class="comment">//将文件转换为字节数组</span></span><br><span class="line">    <span class="keyword">byte</span>[] data = FileUtil.toByteArray2(filePath);  </span><br><span class="line">    fileName = URLEncoder.encode(fileName, <span class="string">"UTF-8"</span>);  </span><br><span class="line">    response.reset();  </span><br><span class="line">    response.setHeader(<span class="string">"Content-Disposition"</span>, <span class="string">"attachment; filename=\""</span> + fileName + <span class="string">"\""</span>);  </span><br><span class="line">    response.addHeader(<span class="string">"Content-Length"</span>, <span class="string">""</span> + data.length);  </span><br><span class="line">    response.setContentType(<span class="string">"application/octet-stream;charset=UTF-8"</span>);  </span><br><span class="line">    OutputStream outputStream = <span class="keyword">new</span> BufferedOutputStream(response.getOutputStream());  </span><br><span class="line">    outputStream.write(data);  </span><br><span class="line">    outputStream.flush();  </span><br><span class="line">    outputStream.close();</span><br><span class="line">    response.flushBuffer();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段下载代码下载任何文件都是没有问题的，在项目当中也是经常用到，但是用于PDFObject就行不通了，也不是这段代码的问题，这里做个稍微的改动：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Jackrabbit库中文件设定类型的去显示</span></span><br><span class="line"><span class="comment"> * 针对pdfObject的修改</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span>  <span class="title">pdfObjectViewer</span><span class="params">(<span class="keyword">final</span> HttpServletResponse response, <span class="keyword">byte</span>[] data)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">     response.reset();</span><br><span class="line">     response.setContentType(<span class="string">"application/pdf;charset=UTF-8"</span>);</span><br><span class="line">     OutputStream outputStream = <span class="keyword">new</span> BufferedOutputStream(response.getOutputStream());</span><br><span class="line">     outputStream.write(data);</span><br><span class="line">     outputStream.flush();</span><br><span class="line">     outputStream.close();</span><br><span class="line">     response.flushBuffer();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大家不用在意这个data字节数组，看自己的逻辑要求去修改就可以，主要是设定这个MIME类型，原先的下载MIME类型是octet-stream，这里修改为指定的文件类型pdf，文件名的设定不需要也可以。</p><blockquote><p>application：某二进制的一个附件</p></blockquote><blockquote><p>octet-stream：子类型，不确定下载文件的通用指定</p></blockquote><blockquote><p>pdf：pdf类型的文件</p></blockquote><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>希望大家遇到同样的问题后能看到这篇笔记，有不对的地方请指正，让他人少走弯路。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;PDFObject插件&quot;&gt;&lt;a href=&quot;#PDFObject插件&quot; class=&quot;headerlink&quot; title=&quot;PDFObject插件&quot;&gt;&lt;/a&gt;PDFObject插件&lt;/h1&gt;&lt;p&gt;PDFObject插件是一款前端阅读pdf的便捷插件，简单好用，官方
      
    
    </summary>
    
      <category term="七七八八" scheme="https://liujunit.github.io/categories/%E4%B8%83%E4%B8%83%E5%85%AB%E5%85%AB/"/>
    
    
      <category term="PDFObject" scheme="https://liujunit.github.io/tags/PDFObject/"/>
    
      <category term="文件下载" scheme="https://liujunit.github.io/tags/%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>两个git远程仓库的同时更新</title>
    <link href="https://liujunit.github.io/2018/12/01/%E4%B8%A4%E4%B8%AAgit%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E7%9A%84%E5%90%8C%E6%97%B6%E6%9B%B4%E6%96%B0/"/>
    <id>https://liujunit.github.io/2018/12/01/两个git远程仓库的同时更新/</id>
    <published>2018-12-01T07:34:24.000Z</published>
    <updated>2018-12-19T12:56:48.874Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>原先的博客是放在github上的，但是github的站点不稳定，经常访问打不开，正好朋友租了个阿里的服务器，想想还是放到朋友的服务器上吧，然后就开始折腾，中途也是遇到了各种坑，搭建nginx，域名备案，gitlib安装，这里就简单的说下，gitlib前两天试着装上了，代码也可以上传了，但是发现这玩意占内存太大了，总是一卡一卡的，很是头疼，然后果断放弃，还是用最原始的git吧，但是也不想放弃github上的更新，那么问题来了，如何本地修改后同时更新两个库呢？</p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><h2 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h2><p>nginx这里的思路是直接监听80端口，然后跳转到博客的静态页面，自己配置了下http连接跳转https，然后发现需要域名备案，就这样来回的折腾，但是https是不需要备案的，这里贴出配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen       80 default_server;</span><br><span class="line">        listen       [::]:80 default_server;</span><br><span class="line">        server_name  www.liujunit.com liujunit.com;</span><br><span class="line">        rewrite     ^(.*)$ https://www.liujunit.com permanent;</span><br><span class="line">        root         /usr/LjunBlog/public;</span><br><span class="line">        # Load configuration files for the default server block.</span><br><span class="line">        include /etc/nginx/default.d/*.conf;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        error_page 404 /404.html;</span><br><span class="line">            location = /40x.html &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        error_page 500 502 503 504 /50x.html;</span><br><span class="line">            location = /50x.html &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"># Settings for a TLS enabled server.</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">        listen       443 ssl http2 default_server;</span><br><span class="line">        listen       [::]:443 ssl http2 default_server;</span><br><span class="line">        server_name  www.liujunit.com liujunit.com;</span><br><span class="line">        root         /usr/LjunBlog/public;</span><br><span class="line"></span><br><span class="line">        ssl_certificate &quot;/etc/pki/nginx/1547172_www.liujunit.com.pem&quot;;</span><br><span class="line">        ssl_certificate_key &quot;/etc/pki/nginx/1547172_www.liujunit.com.key&quot;;</span><br><span class="line">        ssl_session_cache shared:SSL:1m;</span><br><span class="line">        ssl_session_timeout  10m;</span><br><span class="line">        ssl_ciphers HIGH:!aNULL:!MD5;</span><br><span class="line">        ssl_prefer_server_ciphers on;</span><br><span class="line"></span><br><span class="line">        # Load configuration files for the default server block.</span><br><span class="line">        include /etc/nginx/default.d/*.conf;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        error_page 404 /404.html;</span><br><span class="line">            location = /40x.html &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        error_page 500 502 503 504 /50x.html;</span><br><span class="line">            location = /50x.html &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>https的配置是需要证书的，阿里的域名可以免费申请一个证书的，然后下载下来放到服务器上就可以了,好像有效期是一年吧，完了继续申请就可以了。</p><h2 id="git配置"><a href="#git配置" class="headerlink" title="git配置"></a>git配置</h2><p>这里就不说git的安装以及公钥的上传配置，万能的百度和Google会告诉你的，就说下配置远程仓库。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd /home/git</span><br><span class="line">git init --bare blog.git</span><br><span class="line">cd blog.git/hooks</span><br><span class="line">vim post-receive</span><br></pre></td></tr></table></figure><p>git init –bare blog.git创建一个远程裸仓库</p><p>然后新建一个配置文件post-receive，相当于指定工作空间</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">git --work-tree=/usr/LjunBlog/public --git-dir=/home/git/blog.git checkout -f</span><br></pre></td></tr></table></figure><p>:wq!保存退出</p><p>赋予这个配置文件权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x post-receive</span><br></pre></td></tr></table></figure><p>配置到这里基本上就可以了。</p><h2 id="本地添加远程仓库地址"><a href="#本地添加远程仓库地址" class="headerlink" title="本地添加远程仓库地址"></a>本地添加远程仓库地址</h2><p>本人更新git远程仓库代码的时候一直用的是SourceTree，确实好用，选择原先的仓库在设置里添加远程仓库</p><p><img src="\img\2018-12-01\c59562738e4a5b0caa6b789fd9ee99ae.jpg" alt=""></p><p>选择刚才新加的远程地址拉取代码</p><p><img src="\img\2018-12-01\b9209e33627d5c5a9f3c317ebe30206e.png" alt=""></p><p>选择新增地址推送代</p><p><img src="\img\2018-12-01\84f0a7e5bcd45d129434a7ce558d486b.png" alt=""></p><p>基本步骤就是这样，每次推送的时候两个仓库都推送一遍就可以了。</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>一直用SourceTree，基本上就是傻瓜式的操作，看来得好好看看git的一些知识了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;原先的博客是放在github上的，但是github的站点不稳定，经常访问打不开，正好朋友租了个阿里的服务器，想想还是放到朋友的服务器上吧，然
      
    
    </summary>
    
      <category term="七七八八" scheme="https://liujunit.github.io/categories/%E4%B8%83%E4%B8%83%E5%85%AB%E5%85%AB/"/>
    
    
      <category term="nginx" scheme="https://liujunit.github.io/tags/nginx/"/>
    
      <category term="git" scheme="https://liujunit.github.io/tags/git/"/>
    
      <category term="SourceTree" scheme="https://liujunit.github.io/tags/SourceTree/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot学习笔记（三）</title>
    <link href="https://liujunit.github.io/2018/12/01/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <id>https://liujunit.github.io/2018/12/01/SpringBoot学习笔记（三）/</id>
    <published>2018-12-01T05:30:58.000Z</published>
    <updated>2018-12-19T12:56:48.871Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot配置文件操作"><a href="#SpringBoot配置文件操作" class="headerlink" title="SpringBoot配置文件操作"></a>SpringBoot配置文件操作</h1><h2 id="Value注解"><a href="#Value注解" class="headerlink" title="@Value注解"></a>@Value注解</h2><p>不管是yaml还是properties配置文件@Value都支持</p><p>上一次的时候我们使用的是@ConfigurationProperties进行的全部注入，这次使用@Value</p><p><strong>两者的区别：</strong></p><table><thead><tr><th></th><th>@ConfigurationProperties</th><th>@Value</th></tr></thead><tbody><tr><td>批量注入</td><td>支持</td><td>不支持</td></tr><tr><td>松散语法</td><td>支持</td><td>不支持</td></tr><tr><td>SpEl（Spring表达式）</td><td>不支持</td><td>支持</td></tr><tr><td>JSR303数据校验</td><td>支持</td><td>不支持</td></tr><tr><td>复杂类型封装（map，list等）</td><td>支持</td><td>不支持</td></tr></tbody></table><p><strong>松散语法：</strong></p><p>假定这个bean中有个属性是lastName，我们配置文件中可以写成last_name或者last-name</p><p><strong>SpEl：</strong></p><p>Spring的表达式，例如下面的#{10*10}输出的注入后就会成为100，“false”直接指定属性boolean类型</p><p><strong>JSR303：</strong></p><p>Spring的数据校验@ConfigurationProperties支持，而使用@Value的时候会跳过校验，使用数据校验的时候添加@Validated注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将配置文件中的每一个配置映射到这个组件中来</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ConfigurationProperties</span> 告诉SpringBoot将本类中的数据与配置文件中的数据进行绑定</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Component</span> 只有将这个类放到容器中，才能使用<span class="doctag">@ConfigurationProperties</span>功能</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Validated</span> 数据校验只针对<span class="doctag">@ConfigurationProperties</span>注解，使用<span class="doctag">@Value</span>的时候不生效</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liujun</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="comment">//@ConfigurationProperties(prefix = "person")</span></span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;person.name&#125;"</span>)</span><br><span class="line">    <span class="comment">//name必须是邮箱格式才能注入</span></span><br><span class="line">    <span class="meta">@Email</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"#&#123;10*10&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"false"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> boss;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;person.birth&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; map;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; list;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>通过上面的对比我们可以发现@ConfigurationProperties比@Value要好使许多，但是@Value也是有自己的用途的，例如我们要在我们的程序获取配置文件中的一个单个的值，这时候就用@Value要方便很多。</p><p>比如下面的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;person.name&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hell</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello "</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在浏览器中访问就可以看到name的值。</p><h2 id="PropertySource注解"><a href="#PropertySource注解" class="headerlink" title="@PropertySource注解"></a>@PropertySource注解</h2><p>@PropertySource用来指定获取拿个配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">person.name=Ljun</span><br><span class="line">person.age=28</span><br><span class="line">person.birth=1990/1/1</span><br><span class="line">person.boss=true</span><br><span class="line">person.map.k1=v1</span><br><span class="line">person.map.k2=12</span><br><span class="line">person.list=1,lilis,nihao</span><br><span class="line">person.dog.name=pipi</span><br><span class="line">person.dog.age=2</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PropertySource</span>(value = <span class="string">"classpath:person.properties"</span>)</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"person"</span>)</span><br><span class="line"><span class="comment">//@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"><span class="comment">//    @Value("$&#123;person.name&#125;")</span></span><br><span class="line"><span class="comment">//    @Email</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"><span class="comment">//    @Value("#&#123;10*10&#125;")</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"><span class="comment">//    @Value("false")</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> boss;</span><br><span class="line"><span class="comment">//    @Value("$&#123;person.birth&#125;")</span></span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; map;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; list;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>这里的classpath：后面直接写文件名不要加空格，不然会找不到这个文件</p><h2 id="ImportResource注解"><a href="#ImportResource注解" class="headerlink" title="@ImportResource注解"></a>@ImportResource注解</h2><p>@ImportResource注解用来引入Spring的配置文件，在启动类上添加这个注解就可以了</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"helloService"</span> <span class="attr">class</span>=<span class="string">"com.liujunit.springboothelloworld02.service.HelloService"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ImportResource</span>导入配置文件使其生效</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ImportResource</span>(value = <span class="string">"classpath:beans.xml"</span>)</span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBootHelloworld02Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringBootHelloworld02Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在测试类中测试是否引入成功</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.liujunit.springboothelloworld02.bean.Person;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SpringBoot的测试类 测试是否注入成功</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBootHelloworld02ApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Person person;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ApplicationContext ioc;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBeans</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> b = ioc.containsBean(<span class="string">"helloService"</span>);</span><br><span class="line">        System.out.println(b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(person);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>注入ApplicationContext的时候一定要引用的是Spring的包而不是servelt的</p><p>但是SpringBoot不推荐这种方式去引用Spring的配置的文件，而是推荐使用注解的方式@Configuration和@Bean</p><h2 id="Configuration和-Bean注解"><a href="#Configuration和-Bean注解" class="headerlink" title="@Configuration和@Bean注解"></a>@Configuration和@Bean注解</h2><p>代替@ImportResource注解，注入Spring的配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.liujunit.springboothelloworld02.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.liujunit.springboothelloworld02.service.HelloService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Configuration</span>添加配置文件</span></span><br><span class="line"><span class="comment"> * 代替原先的beans.xml方式的注入</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAppConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Bean</span>相当与原先配置文件中的&lt;bean&gt;&lt;/bean&gt;标签，方法名helloService01相当于bean标签中的id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HelloService <span class="title">helloService01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"配置@Bean给容器中添加组件"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HelloService();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改测试类中的获取的id进行测试，注入成功</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span> b = ioc.containsBean(<span class="string">"helloService01"</span>);</span><br></pre></td></tr></table></figure><h2 id="配置文件中的占位符"><a href="#配置文件中的占位符" class="headerlink" title="配置文件中的占位符"></a>配置文件中的占位符</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$&#123;random.value&#125;、$&#123;random.<span class="keyword">int</span>&#125;、$&#123;random.<span class="keyword">long</span>&#125;</span><br><span class="line">$&#123;random.<span class="keyword">int</span>(<span class="number">10</span>)&#125;、$&#123;random.<span class="keyword">int</span>[<span class="number">1024</span>,<span class="number">65536</span>]&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">person.name=Ljun$&#123;random.uuid&#125;</span><br><span class="line">person.age=$&#123;random.int(20)&#125;</span><br><span class="line">person.birth=1990/1/1</span><br><span class="line">person.boss=true</span><br><span class="line">person.map.k1=v1</span><br><span class="line">person.map.k2=12</span><br><span class="line">person.list=1,lilis,nihao</span><br><span class="line">person.dog.name=$&#123;person.sex:hello--&#125;pipi</span><br><span class="line">person.dog.age=2</span><br></pre></td></tr></table></figure><p>person.sex不存在则会引用默认值hello–</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>贵在坚持</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SpringBoot配置文件操作&quot;&gt;&lt;a href=&quot;#SpringBoot配置文件操作&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot配置文件操作&quot;&gt;&lt;/a&gt;SpringBoot配置文件操作&lt;/h1&gt;&lt;h2 id=&quot;Value注解&quot;&gt;
      
    
    </summary>
    
      <category term="SpringBoot学习笔记" scheme="https://liujunit.github.io/categories/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="SpringBoot" scheme="https://liujunit.github.io/tags/SpringBoot/"/>
    
      <category term="注解" scheme="https://liujunit.github.io/tags/%E6%B3%A8%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot学习笔记（二）</title>
    <link href="https://liujunit.github.io/2018/11/25/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>https://liujunit.github.io/2018/11/25/SpringBoot学习笔记（二）/</id>
    <published>2018-11-25T07:08:28.000Z</published>
    <updated>2018-12-19T12:56:48.872Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot的配置文件"><a href="#SpringBoot的配置文件" class="headerlink" title="SpringBoot的配置文件"></a>SpringBoot的配置文件</h1><p>SpringBoot支持两种配置文件，一种是我们常用properties文件，另一种是yaml文件，properties配置文件的使用相信大家已经很熟悉了，在这里我们只讨论新增的yaml配置文件。</p><p>SpringBoot已经默认配置文件的名称可以为(其中yml的后缀也可以改成yaml)：</p><blockquote><p>application.yml</p><p>application.properties</p></blockquote><h1 id="yaml配置文件"><a href="#yaml配置文件" class="headerlink" title="yaml配置文件"></a>yaml配置文件</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>YAML是一另一种标记性语言，这种格式的配置文件更注重的是一数据为中心的进行配置，不像我们以前所用的XXX.xml配置文件有许多的标签格式，YAML更是将空格发挥到了极致的作用，数据层级的关系，以空格和左对齐的方式去判别，例如：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><h2 id="yaml语法格式"><a href="#yaml语法格式" class="headerlink" title="yaml语法格式"></a>yaml语法格式</h2><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><p>K:(空格)V：用来表示一对键值对，空格必须有</p><p>以左对齐加空格的方式去判断是否是同一层级的数据</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">  path:</span> <span class="string">/hello</span></span><br></pre></td></tr></table></figure><h3 id="值的写法"><a href="#值的写法" class="headerlink" title="值的写法"></a>值的写法</h3><h4 id="普通字面量（字符串，数字，布尔值）："><a href="#普通字面量（字符串，数字，布尔值）：" class="headerlink" title="普通字面量（字符串，数字，布尔值）："></a>普通字面量（字符串，数字，布尔值）：</h4><p>k: v 普通的值以键值对中间加空格的形式就可以，字符串默认不用添加双引号或者单引号的。</p><p>双引号：如果添加了双引号，会对双引号中的带有转义的字符进行转义</p><p>name: “zhangsan \n lisi”：输出zhangsan 换行 lisi</p><p>单引号：如果添加了单引号，单引号中的内容是什么就会输出什么，转义无效</p><p>name:’zhangsan \n lisi’：输出zhangsan \n lisi</p><h4 id="对象、Map-属性和值-（键值对）："><a href="#对象、Map-属性和值-（键值对）：" class="headerlink" title="对象、Map(属性和值) （键值对）："></a>对象、Map(属性和值) （键值对）：</h4><p>首行是这个对象或者map的名称，下一行依然是对象和k: v的显示</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">friends:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">lili</span></span><br><span class="line"><span class="attr">  age:</span> <span class="number">20</span></span><br></pre></td></tr></table></figure><p>也可以写到一行</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">friends:</span> <span class="string">&#123;name:</span> <span class="string">lili,</span> <span class="attr">age:</span> <span class="number">20</span><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="数组（list-set）"><a href="#数组（list-set）" class="headerlink" title="数组（list, set）:"></a>数组（list, set）:</h4><p>用 -(空格)值 的方式表示数组中的元素</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pets:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">cat</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">dog</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">pig</span></span><br></pre></td></tr></table></figure><p>行内写法</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pets:</span> <span class="string">[cat,</span> <span class="string">dog,</span> <span class="string">pig]</span></span><br></pre></td></tr></table></figure><h3 id="配置文件的注入"><a href="#配置文件的注入" class="headerlink" title="配置文件的注入"></a>配置文件的注入</h3><p>yaml：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">lili</span></span><br><span class="line"><span class="attr">  age:</span> <span class="number">28</span></span><br><span class="line"><span class="attr">  boss:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  birth:</span> <span class="number">1990</span><span class="string">/02/03</span></span><br><span class="line"><span class="attr">  map:</span></span><br><span class="line"><span class="attr">    k1:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">    k2:</span> <span class="string">v2</span></span><br><span class="line"><span class="attr">  list:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">lisi</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">wangwu</span></span><br><span class="line"><span class="bullet">    -</span> <span class="number">24</span></span><br><span class="line"><span class="attr">  dog:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">xixi</span></span><br><span class="line"><span class="attr">    age:</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><p>JavaBean：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将配置文件中的每一个配置映射到这个组件中来</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ConfigurationProperties</span> 告诉SpringBoot将本类中的数据与配置文件中的数据进行绑定</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Component</span> 只有将这个类放到容器中，才能使用<span class="doctag">@ConfigurationProperties</span>功能</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liujun</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"person"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> boss;</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; map;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; list;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">    ...省略get set toString</span><br></pre></td></tr></table></figure><p>当我们在写JavaBean添加@ConfigrationProperties注解的时候，如果使用的IDEA，会在这个类的上方出现提醒没有找到配置文件处理器，点击open documents，将处理器引入到pom文件中即可</p><p>pom文件添加配置文件处理器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 导入配置文件处理器，这样配置文件进行绑定时就会有提示 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="测试是否能读取数据"><a href="#测试是否能读取数据" class="headerlink" title="测试是否能读取数据"></a>测试是否能读取数据</h3><p><strong>注意：</strong>自己新建的类的层级关系，SpringBoot的启动类的层级必须大于等于我们所创建的类，不能再启动类的外层新建JavaBean，否则会注入失败。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SpringBoot的测试类 测试是否注入成功</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBootHelloworld02ApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Person person;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(person);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>时间是挤出来的，这段时间真的是忙997，后面会继续抽时间充电。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SpringBoot的配置文件&quot;&gt;&lt;a href=&quot;#SpringBoot的配置文件&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot的配置文件&quot;&gt;&lt;/a&gt;SpringBoot的配置文件&lt;/h1&gt;&lt;p&gt;SpringBoot支持两种配置文件
      
    
    </summary>
    
      <category term="SpringBoot学习笔记" scheme="https://liujunit.github.io/categories/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="SpringBoot" scheme="https://liujunit.github.io/tags/SpringBoot/"/>
    
      <category term="yaml" scheme="https://liujunit.github.io/tags/yaml/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot学习笔记（一）</title>
    <link href="https://liujunit.github.io/2018/11/18/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>https://liujunit.github.io/2018/11/18/SpringBoot学习笔记（一）/</id>
    <published>2018-11-18T09:24:02.000Z</published>
    <updated>2018-12-19T12:56:48.870Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-Boot-简介"><a href="#Spring-Boot-简介" class="headerlink" title="Spring Boot 简介"></a>Spring Boot 简介</h1><blockquote><p>简化Spring应用开发的一个框架；</p><p>整个Spring技术栈的一个大整合；</p><p>J2EE开发的一站式解决方案；</p></blockquote><p>微服务是一种架构风格，每一个单个应用应该是一个小型服务，每个应用之间通过http进行相互之间的通信，这样每个单独的应用可以进行独立的升级和替换而不影响整体的功能。</p><p>SpringBoot简化了开发的繁琐的环境搭建，以及应用部署，我们不必过多的关注环境的准备以及上线时服务器环境的配置，SpringBoot可以将程序打成jar包，服务器上只要使用java -jar的命令就能将程序启动起来，而不必过多的去配置tomcat，因为SpringBoot已经将tomcat集成到了程序里。</p><h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><blockquote><p>jdk1.8    SpringBoot官方要求jdk的版本不得低于1.7</p><p>maven3.X    maven3.3及以上版本</p><p>IntelliJIDEA2018    开发工具用的IDEA，目前应该算是最流行也是最好用的，版本只要是16以上的都没问题</p><p>SpringBoot2.1.0.RELEASE    2.1.0我这里用的是最新的版本</p></blockquote><h2 id="maven配置"><a href="#maven配置" class="headerlink" title="maven配置"></a>maven配置</h2><h3 id="配置阿里云镜像"><a href="#配置阿里云镜像" class="headerlink" title="配置阿里云镜像"></a>配置阿里云镜像</h3><p>引入大批量的jar没有国内镜像，这个下载的过程总是痛苦的，所以我推荐大家最好还是用阿里的镜像，体验下什么是波音747的感觉。在mirrors标签里添加如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-aliyun<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus aliyun<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置profiles"><a href="#配置profiles" class="headerlink" title="配置profiles"></a>配置profiles</h3><p>添加本地的运行打包环境, 在profiles中添加如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>jdk-1.8<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 激活配置的环境 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdk</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.compilerVersion</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="IDEA的设置"><a href="#IDEA的设置" class="headerlink" title="IDEA的设置"></a>IDEA的设置</h2><p>我们使用的IDEA可以在默认配置中修改关于maven的引用，将自带的maven替换成我们自己的，首先寻找默认配置：</p><p><img src="\img\2018-11-21\8718cb52753c4883b5c87f02d9718b5e.png" alt=""></p><p>修改默认maven配置点击保存：</p><p><img src="\img\2018-11-21\d3c5d3085cb844248874b98e2c9584da.png" alt=""></p><h1 id="两种快速搭建的方式"><a href="#两种快速搭建的方式" class="headerlink" title="两种快速搭建的方式"></a>两种快速搭建的方式</h1><p>快速搭建有两种方式，一种是本地自己手动maven构建，一种是从官方下载模板构建</p><h2 id="本地maven构建"><a href="#本地maven构建" class="headerlink" title="本地maven构建"></a>本地maven构建</h2><p>创建一个maven工程，不使用任何的预设好的原型</p><p><img src="\img\2018-11-21\df29629f35ae4497a58fca23f950e5be.png" alt=""></p><p>maven中添加依赖，指定版本，从导入的jar包中可以看出SpringBoot已经将我们平常开发所需要的基本的jar包都添加到了父依赖当中，省去了我们不必要的一些整合，包扩一些默认的配置（例如tomca的端口号），在以后的文章中会提到如何如何修改这些默认配置。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Inherit defaults from Spring Boot 导入父依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Add typical dependencies for a web application 导入我们需要的模块--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Package as an executable jar 导入maven打包的插件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编写启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.liujunit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@SpringBootApplication</span> 用来标注这是一个SpringBoot的应用程序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldMainApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//用来启动这个应用程序</span></span><br><span class="line">        SpringApplication.run(HelloWorldMainApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写一个HelloController来进行测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.liujunit.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行启动类，浏览器访问<a href="http://localhost:8080/hello" target="_blank" rel="noopener">http://localhost:8080/hello</a></p><p><img src="\img\2018-11-21\ac3e84dfa5cb49cb83c5a4bfc3aaf73b.png" alt=""></p><p>是不是很快！！！在这整个的过程中我们没有进行任何的配置，默认启用tomcat的8080端口。</p><h2 id="使用Spring-Initializr联网构建"><a href="#使用Spring-Initializr联网构建" class="headerlink" title="使用Spring Initializr联网构建"></a>使用Spring Initializr联网构建</h2><p>IDEA新建项目的时候选用Spring Initializr，默认官方网址就可以了</p><p><img src="\img\2018-11-21\6468595841f846b0b09d88b918ab0741.png" alt=""></p><p>填写组织和项目标识就可以了，其他默认，打包方式是jar包的形式</p><p><img src="\img\2018-11-21\c3dc6480e71847bf870e2bf17ea71942.png" alt=""></p><p>这里我们初步只勾选web就可以了，这里面有许多我们可以预选择的一些集成</p><p><img src="\img\2018-11-21\6155b7e779ee40aea4615a92b4ecba03.png" alt=""></p><p>删掉一些没有用的文件，可以看下目录结构都给我们建好了包扩启动类，其中resource下的static中主要放一些前台静态文件，templates主要放一些前端的模板，SpringBoot不支持jsp，推荐使用thymeleaf 或者freemarker。</p><p><img src="\img\2018-11-21\5be70f95253d4f2690f86f76488f8757.png" alt=""></p><p>同第一种方式一样，运行启动，在浏览器看到同样的结果, 而且控制台是彩色的有木有很装逼的样子。</p><h1 id="打包部署"><a href="#打包部署" class="headerlink" title="打包部署"></a>打包部署</h1><p>打包部署更是简单，点击package就会在target文件下生成一个jar包。</p><p><img src="\img\2018-11-21\6bd57a4467eb43efa8f7a410d7f5114e.png" alt=""></p><p>将这个jar包粘贴到任意文件夹下使用命令行java -jar的就可以启动，真的简单好用。</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>SpringBoot是趋势，觉得还是很有必要学一学的。后面会继续更新，图片粘贴复制真的麻烦。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Spring-Boot-简介&quot;&gt;&lt;a href=&quot;#Spring-Boot-简介&quot; class=&quot;headerlink&quot; title=&quot;Spring Boot 简介&quot;&gt;&lt;/a&gt;Spring Boot 简介&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;简化Spring应
      
    
    </summary>
    
      <category term="SpringBoot学习笔记" scheme="https://liujunit.github.io/categories/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="SpringBoot" scheme="https://liujunit.github.io/tags/SpringBoot/"/>
    
      <category term="Maven" scheme="https://liujunit.github.io/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>重温数据库操作JDBC</title>
    <link href="https://liujunit.github.io/2018/11/11/%E9%87%8D%E6%B8%A9%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9CJDBC/"/>
    <id>https://liujunit.github.io/2018/11/11/重温数据库操作JDBC/</id>
    <published>2018-11-11T05:07:57.000Z</published>
    <updated>2018-12-19T12:56:48.876Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><pre><code>    在日常的开发当中，我们总是用框架去连接数据库，去完成业务中的需求，但是不可避免的有时候我们需要对数据进行额外的处理，批量的修改或查询，这时候用框架就显得有点杀鸡用牛刀了，在这里我们将重温原始的JDBC操作，好记性不如烂笔头。</code></pre><h1 id="JDBC操作步骤"><a href="#JDBC操作步骤" class="headerlink" title="JDBC操作步骤"></a>JDBC操作步骤</h1><pre><code>1.注册驱动2.获取连接3.获取预处理语句4.添加占位符5.结果遍历或者查询修改记录条数6.释放资源</code></pre><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><pre><code>1.导入数据库连接需要的jar包，这里使用maven</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;5.1.47&lt;/version&gt;</span><br></pre></td></tr></table></figure><pre><code>2.增删改查的测试</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line">import org.junit.Test;</span><br><span class="line"></span><br><span class="line">import java.sql.*;</span><br><span class="line"></span><br><span class="line">public class DBTest &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">    * 增</span><br><span class="line">    *</span><br><span class="line">    * @throws ClassNotFoundException</span><br><span class="line">    * @throws SQLException</span><br><span class="line">    */</span><br><span class="line">    @Test</span><br><span class="line">    public void test01() throws ClassNotFoundException, SQLException &#123;</span><br><span class="line">        //1.注册驱动</span><br><span class="line">        Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</span><br><span class="line">        //2.获取连接</span><br><span class="line">        Connection conn = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test&quot;, &quot;root&quot;, &quot;asdfmin&quot;);</span><br><span class="line">        //3.获得预处理语句</span><br><span class="line">        String sql = &quot;insert into user (name, sex, age) values (? , ?, ?)&quot;;</span><br><span class="line">        PreparedStatement preparedStatement = conn.prepareStatement(sql);</span><br><span class="line">        //4.添加占位符</span><br><span class="line">        preparedStatement.setString(1, &quot;jack&quot;);</span><br><span class="line">        preparedStatement.setString(2, &quot;男&quot;);</span><br><span class="line">        preparedStatement.setString(3, &quot;18&quot;);</span><br><span class="line">        //5.执行预处理语句</span><br><span class="line">        int i = preparedStatement.executeUpdate();</span><br><span class="line">        System.out.println(&quot;添加新记录条数：&quot; + i);</span><br><span class="line">        //6.释放资源</span><br><span class="line">        preparedStatement.close();</span><br><span class="line">        conn.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">    * 更</span><br><span class="line">    *</span><br><span class="line">    * @throws ClassNotFoundException</span><br><span class="line">    * @throws SQLException</span><br><span class="line">    */</span><br><span class="line">    @Test</span><br><span class="line">    public void test02() throws ClassNotFoundException, SQLException &#123;</span><br><span class="line">        //1.注册驱动</span><br><span class="line">        Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</span><br><span class="line">        //2.获取连接</span><br><span class="line">        Connection conn = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test&quot;, &quot;root&quot;, &quot;asdfmin&quot;);</span><br><span class="line">        //3.获取预处理语句</span><br><span class="line">        String sql = &quot;update user set age = ? where name = ?&quot;;</span><br><span class="line">        PreparedStatement preparedStatement = conn.prepareStatement(sql);</span><br><span class="line">        //4.添加占位符</span><br><span class="line">        preparedStatement.setString(1, &quot;19&quot;);</span><br><span class="line">        preparedStatement.setString(2, &quot;jack&quot;);</span><br><span class="line">        //5.执行预处理语句</span><br><span class="line">        int i = preparedStatement.executeUpdate();</span><br><span class="line">        System.out.println(&quot;更新记录条数：&quot; + i);</span><br><span class="line">        //6.释放资源</span><br><span class="line">        preparedStatement.close();</span><br><span class="line">        conn.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">    * 删</span><br><span class="line">    *</span><br><span class="line">    * @throws ClassNotFoundException</span><br><span class="line">    * @throws SQLException</span><br><span class="line">    */</span><br><span class="line">    @Test</span><br><span class="line">    public void test03() throws ClassNotFoundException, SQLException &#123;</span><br><span class="line">        //1.注册驱动</span><br><span class="line">        Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</span><br><span class="line">        //2.获取连接</span><br><span class="line">        Connection conn = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test&quot;, &quot;root&quot;, &quot;asdfmin&quot;);</span><br><span class="line">        //3.获取预处理语句</span><br><span class="line">        String sql = &quot;delete from user where id = ?&quot;;</span><br><span class="line">        PreparedStatement preparedStatement = conn.prepareStatement(sql);</span><br><span class="line">        //4.添加占位符</span><br><span class="line">        preparedStatement.setString(1, &quot;1&quot;);</span><br><span class="line">        //5.执行预处理</span><br><span class="line">        int i = preparedStatement.executeUpdate();</span><br><span class="line">        System.out.println(&quot;删除记录条数：&quot; + i);</span><br><span class="line">        //6.释放资源</span><br><span class="line">        preparedStatement.close();</span><br><span class="line">        conn.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">    * 查</span><br><span class="line">    * @throws ClassNotFoundException</span><br><span class="line">    * @throws SQLException</span><br><span class="line">    */</span><br><span class="line">    @Test</span><br><span class="line">    public void test04() throws ClassNotFoundException, SQLException &#123;</span><br><span class="line">        //1.注册驱动</span><br><span class="line">        Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</span><br><span class="line">        //2.获取连接</span><br><span class="line">        Connection conn = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test&quot;, &quot;root&quot;, &quot;asdfmin&quot;);</span><br><span class="line">        //3.获取预处理语句</span><br><span class="line">        //String sql = &quot;select * from user&quot;;</span><br><span class="line">        String sql = &quot;select * from user where name = ?&quot;;</span><br><span class="line">        PreparedStatement preparedStatement = conn.prepareStatement(sql);</span><br><span class="line">        //4.添加站位符</span><br><span class="line">        preparedStatement.setString(1, &quot;jack&quot;);</span><br><span class="line">        //5.执行预处理</span><br><span class="line">        ResultSet resultSet = preparedStatement.executeQuery();</span><br><span class="line">        //6.遍历结果集</span><br><span class="line">        while (resultSet.next()) &#123;</span><br><span class="line">            int id = resultSet.getInt(&quot;id&quot;);</span><br><span class="line">            String name = resultSet.getString(&quot;name&quot;);</span><br><span class="line">            String sex = resultSet.getString(&quot;sex&quot;);</span><br><span class="line">            String age = resultSet.getString(&quot;age&quot;);</span><br><span class="line">            System.out.println(&quot;id:&quot; + id + &quot;   name:&quot; + name + &quot;  set:&quot; + sex + &quot;  age:&quot; + age);</span><br><span class="line">        &#125;</span><br><span class="line">        //7.关闭资源</span><br><span class="line">        resultSet.close();</span><br><span class="line">        preparedStatement.close();</span><br><span class="line">        conn.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>3.说明这里用的是预处理语句PreparedStatement（防止sql注入攻击）</code></pre><h1 id="对于JDBC的简单封装"><a href="#对于JDBC的简单封装" class="headerlink" title="对于JDBC的简单封装"></a>对于JDBC的简单封装</h1><pre><code>对于频繁的注册驱动获取连接我们可以进行简单的封装</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">import java.sql.Connection;</span><br><span class="line">import java.sql.DriverManager;</span><br><span class="line">import java.sql.SQLException;</span><br><span class="line"></span><br><span class="line">public class JDBCUtils &#123;</span><br><span class="line"></span><br><span class="line">    private static final String DRIVERNAME = &quot;com.mysql.jdbc.Driver&quot;;</span><br><span class="line">    private static final String URL = &quot;jdbc:mysql://localhost:3306/test&quot;;</span><br><span class="line">    private static final String USER = &quot;root&quot;;</span><br><span class="line">    private static final String PASSWORD = &quot;asdfmin&quot;;</span><br><span class="line"></span><br><span class="line">    static &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            //1.注册驱动</span><br><span class="line">            Class.forName(DRIVERNAME);</span><br><span class="line">        &#125; catch (ClassNotFoundException e) &#123;</span><br><span class="line">            System.out.println(&quot;注册驱动失败&quot;);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static Connection getConn() throws SQLException &#123;</span><br><span class="line">        //2.获取连接</span><br><span class="line">        Connection conn = DriverManager.getConnection(URL, USER, PASSWORD);</span><br><span class="line">        //返回连接</span><br><span class="line">        return conn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="测试封装的JDBC工具类"><a href="#测试封装的JDBC工具类" class="headerlink" title="测试封装的JDBC工具类"></a>测试封装的JDBC工具类</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">import org.junit.Test;</span><br><span class="line"></span><br><span class="line">import java.sql.Connection;</span><br><span class="line">import java.sql.PreparedStatement;</span><br><span class="line">import java.sql.ResultSet;</span><br><span class="line">import java.sql.SQLException;</span><br><span class="line"></span><br><span class="line">public class DBUtilTest &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">    * 测试封装的JDBCUtil</span><br><span class="line">    */</span><br><span class="line">    @Test</span><br><span class="line">    public void test01() &#123;</span><br><span class="line">        Connection conn = null;</span><br><span class="line">        PreparedStatement preparedStatement = null;</span><br><span class="line">        ResultSet resultSet = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            //1.获取连接</span><br><span class="line">            conn = JDBCUtils.getConn();</span><br><span class="line">            //2.获取执行语句</span><br><span class="line">            String sql = &quot;select * from user&quot;;</span><br><span class="line">            preparedStatement = conn.prepareStatement(sql);</span><br><span class="line">            //3.添加占位符</span><br><span class="line">            //4.执行预处理语句</span><br><span class="line">            resultSet = preparedStatement.executeQuery();</span><br><span class="line">            //5.遍历结果集</span><br><span class="line">            while (resultSet.next()) &#123;</span><br><span class="line">                String name = resultSet.getString(&quot;name&quot;);</span><br><span class="line">                System.out.println(&quot;name:&quot; + name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            //6.释放资源</span><br><span class="line">            try &#123;</span><br><span class="line">                resultSet.close();</span><br><span class="line">                preparedStatement.close();</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125; catch (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="API的一些简单说明"><a href="#API的一些简单说明" class="headerlink" title="API的一些简单说明"></a>API的一些简单说明</h1><pre><code>执行预处理语句的APIint executeUpdate(); --执行insert update delete语句.ResultSet executeQuery(); --执行select语句.boolean execute(); --执行select返回true 执行其他的语句返回false.</code></pre><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><pre><code>温故而知新</code></pre><p>​        </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;    在日常的开发当中，我们总是用框架去连接数据库，去完成业务中的需求，但是不可避免的有时候我们需要对数据进行额外的处理，
      
    
    </summary>
    
      <category term="数据库" scheme="https://liujunit.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="JDBC" scheme="https://liujunit.github.io/tags/JDBC/"/>
    
      <category term="MySQL" scheme="https://liujunit.github.io/tags/MySQL/"/>
    
      <category term="SQL" scheme="https://liujunit.github.io/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>hexo（jacman主题）修改导航链接为绝对路径</title>
    <link href="https://liujunit.github.io/2018/11/08/hexo%EF%BC%88jacman%E4%B8%BB%E9%A2%98%EF%BC%89%E4%BF%AE%E6%94%B9%E5%AF%BC%E8%88%AA%E9%93%BE%E6%8E%A5%E4%B8%BA%E7%BB%9D%E5%AF%B9%E8%B7%AF%E5%BE%84/"/>
    <id>https://liujunit.github.io/2018/11/08/hexo（jacman主题）修改导航链接为绝对路径/</id>
    <published>2018-11-08T14:04:24.000Z</published>
    <updated>2018-12-19T12:56:48.873Z</updated>
    
    <content type="html"><![CDATA[<h1 id="起始"><a href="#起始" class="headerlink" title="起始"></a>起始</h1><pre><code>    一直想自己搭建一个博客，但是没想到坑是这么的多，磕磕绊绊总算是可以开始写了，本人做java开发的，博客也是作为简单的一个学习记录吧。从简单的事情做起,闲下来就会写一写，也算是督促自己吧。</code></pre><h1 id="关于jacman导航栏链接的修改"><a href="#关于jacman导航栏链接的修改" class="headerlink" title="关于jacman导航栏链接的修改"></a>关于jacman导航栏链接的修改</h1><pre><code>hexo提倡使用绝对路径，但是我想在我的导航栏里面加上一些自己的链接，配置了_config.yml</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">    主页: /</span><br><span class="line">    归档: /archives</span><br><span class="line">    GitHub: https://github.com/liujunit</span><br><span class="line">    CSDN: https://blog.csdn.net/liujun_for_java</span><br><span class="line">    关于: /about</span><br></pre></td></tr></table></figure><pre><code>    但是这样的配置没有生效，跳转链接的时候还是会在GitHub前加上一个斜杠/于是就是开始了漫漫的搜索调试路，无论是百度还是google都找不到自己满意的答案索性自己开始查找修改jacman主题下文件，还是真实找到了</code></pre><h1 id="修改的文件"><a href="#修改的文件" class="headerlink" title="修改的文件"></a>修改的文件</h1><pre><code>修改jacman文件夹下的themes\jacman\layout\_partial\header.ejs文件头部</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">function root_for(path)&#123;</span><br><span class="line">    path = path || &apos;/&apos;</span><br><span class="line">    var root = config.root;</span><br><span class="line">    if (path.substring(0, root.length) !== root)&#123;</span><br><span class="line">        if (path.substring(0, 1) === &apos;/&apos;)&#123;</span><br><span class="line">        path = root.substring(0, root.length - 1) + path;</span><br><span class="line">        &#125; else if(path.indexOf(&apos;http&apos;) == 0)&#123;</span><br><span class="line">            path = path;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            path = root + path;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">return path;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>原先的js代码是没有对http协议是否包含的判断的，自己加个判断路径不变就可以了</code></pre><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><pre><code>    可能大家都是高手高手高高手，没有遇到过这个问题（或许遇到也自己解决了）。。。希望遇到的能有幸看到这篇文章吧，样式后续慢慢调整吧。</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;起始&quot;&gt;&lt;a href=&quot;#起始&quot; class=&quot;headerlink&quot; title=&quot;起始&quot;&gt;&lt;/a&gt;起始&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;    一直想自己搭建一个博客，但是没想到坑是这么的多，磕磕绊绊总算是可以开始写了，本人做java开发的，博客也是
作为简单
      
    
    </summary>
    
      <category term="七七八八" scheme="https://liujunit.github.io/categories/%E4%B8%83%E4%B8%83%E5%85%AB%E5%85%AB/"/>
    
    
      <category term="jacman" scheme="https://liujunit.github.io/tags/jacman/"/>
    
      <category term="hexo" scheme="https://liujunit.github.io/tags/hexo/"/>
    
      <category term="导航链接" scheme="https://liujunit.github.io/tags/%E5%AF%BC%E8%88%AA%E9%93%BE%E6%8E%A5/"/>
    
      <category term="绝对路径" scheme="https://liujunit.github.io/tags/%E7%BB%9D%E5%AF%B9%E8%B7%AF%E5%BE%84/"/>
    
  </entry>
  
</feed>
